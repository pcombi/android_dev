package com.example;

import android.app.Activity;
import android.os.Bundle;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;

import com.example.R;

/**
 * A simple activity that shows two images. Touching an image causes a small shift in its position.
 * Clicking the first button hides the first image. Clicking the second button brings the image back.
 *
 * <p> This activity also tracks focus change events and touch events for the image views.
 * All of this is a start at moving a view when it is touched and dragged around the screen.
 * Note: So far, no focus changes are reported.
 * 
 *
 * @version 001
 */

public class HideAndMove extends Activity 
  implements View.OnFocusChangeListener, View.OnTouchListener
{

private View mV1 = null;   // image view 1
private View mV2 = null;   // image view 2

/**
 * onCreate - called when the activity is first created.
 * Called when the activity is first created. 
 * This is where you should do all of your normal static set up: create views, bind data to lists, etc. 
 * This method also provides you with a Bundle containing the activity's previously frozen state, if there was one.
 * 
 * Always followed by onStart().
 *
 */

protected void onCreate(Bundle savedInstanceState) 
{
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);
 
    // Take button and set it up to hide mv1
    Button b1 = (Button) findViewById(R.id.b1);
    b1.setOnClickListener(new View.OnClickListener() {
	   
	   public void onClick(View v) {
        if (mV1 != null) mV1.setVisibility (View.INVISIBLE);  // View.GONE hides and removes view from the layout.
	   }

    });
    // Take button 2 and set it up to bring back view1.
    Button b2 = (Button) findViewById(R.id.b2);
    b2.setOnClickListener(new View.OnClickListener() {
	   
	   public void onClick(View v) {
        if (mV1 != null) mV1.setVisibility (View.VISIBLE);
	   }

    });

    View v1 = findViewById (R.id.Image1);
    View v2 = findViewById (R.id.Image2);
    mV1 = v1;
    mV2 = v2;

    // Listen for focus changes on the views.
    // (Not sure if image views can take focus.)
    v1.setOnFocusChangeListener (this);
    v2.setOnFocusChangeListener (this);

    // Set up to shift position of views on touch.
    v1.setOnTouchListener (this);
    v2.setOnTouchListener (this);
}
    
/**
 * onDestroy
 * The final call you receive before your activity is destroyed. 
 * This can happen either because the activity is finishing (someone called finish() on it, 
 * or because the system is temporarily destroying this instance of the activity to save space. 
 * You can distinguish between these two scenarios with the isFinishing() method.
 *
 */

protected void onDestroy ()
{
   super.onDestroy ();
}

/**
 * onPause
 * Called when the system is about to start resuming a previous activity. 
 * This is typically used to commit unsaved changes to persistent data, stop animations 
 * and other things that may be consuming CPU, etc. 
 * Implementations of this method must be very quick because the next activity will not be resumed 
 * until this method returns.
 * Followed by either onResume() if the activity returns back to the front, 
 * or onStop() if it becomes invisible to the user.
 *
 */

protected void onPause ()
{
   super.onPause ();
}

/**
 * onRestart
 * Called after your activity has been stopped, prior to it being started again.
 * Always followed by onStart().
 *
 */

protected void onRestart ()
{
   super.onRestart ();
}

/**
 * onResume
 * Called when the activity will start interacting with the user. 
 * At this point your activity is at the top of the activity stack, with user input going to it.
 * Always followed by onPause().
 *
 */

protected void onResume ()
{
   super.onResume ();
}

/**
 * onStart
 * Called when the activity is becoming visible to the user.
 * Followed by onResume() if the activity comes to the foreground, or onStop() if it becomes hidden.
 *
 */

protected void onStart ()
{
   super.onStart ();
}

/**
 * onStop
 * Called when the activity is no longer visible to the user
 * because another activity has been resumed and is covering this one. 
 * This may happen either because a new activity is being started, an existing one 
 * is being brought in front of this one, or this one is being destroyed.
 *
 * Followed by either onRestart() if this activity is coming back to interact with the user, 
 * or onDestroy() if this activity is going away.
 */

protected void onStop ()
{
   super.onStop ();
}

/**
 */
// More Methods

/**
 * Handle a change in focus to a view.
 * 
 * @param v View
 * @param changed boolean
 */

public void onFocusChange (View v, boolean changed)
{
    // Let the user know something happened.
    trace ("View "+ v.getId () + "- focus change: " + changed);
} // end onFocusChange

/**
 * This is the onTouch handler for the custom image view.
 * It shifts the position of the view a bit on each touch.
 * 
 * @param v View
 * @param ev MotionEvent
 * @return boolean - true means the touch event was handled
 */

public boolean onTouch (View v, MotionEvent ev)
{
    //toast ("View touch "+ v.getId ());
    MyImageView iv = (MyImageView) v;
    if (ev.getAction() == MotionEvent.ACTION_DOWN) {
    	iv.setPos(ev.getX(), ev.getY);
    }
    float dx = 10f;
    float dy = -20f;
    iv.changePos (dx, dy);
    return false;
}


/**
 * Show a string on the screen via Toast.
 * 
 * @param msg String
 * @return void
 */

public void toast (String msg)
{
    Toast.makeText (getApplicationContext(), msg, Toast.LENGTH_SHORT).show ();
} // end toast

/**
 * Send a message to the debug log and display it using Toast.
 */

private void trace (String msg) 
{
    Log.d ("HideAndMove", msg);
    toast (msg);
}
} // end class
